//Быстрая сортировка
int partition(int arr[], int low, int high) {
	int pivot = arr[high]; // выбираем опорный элемент  
	int i = (low - 1); // индекс

	for (int j = low; j <= high - 1; j++) {
		// если текущий элемент меньше чем индекс разбиения
		if (arr[j] < pivot) {
			i++; // увеличиваем индекс меньших элементов
			swap(arr[i], arr[j]);
		}
	}
	swap(arr[i + 1], arr[high]);
	return (i + 1);
}



// Сортировка вставками
void insertionSort(int arr[], int n) {
	int i, key, j;
	for (i = 1; i < n; i++) {
		//запоминаем элемент ключа
		key = arr[i];
		j = i - 1;

		// перемещаем все элементы от начала до ключа на одну позицию вправо
		while (j >= 0 && arr[j] > key) {
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		//вставляем элемент ключа
		arr[j + 1] = key;
	}
}



//Сортировка выбором
void selectionSort(int arr[], int n) {
	int i, j, min_idx;

	for (i = 0; i < n - 1; i++) { 
		min_idx = i;
		for (j = i + 1; j < n; j++)
			if (arr[j] < arr[min_idx])
				min_idx = j;

		swap(arr[min_idx], arr[i]);
	}
}
//находим номер минимального значения в текущем списке
//производим обмен этого значения со значением первой неотсортированной позиции (обмен не нужен, если минимальный элемент уже находится на данной позиции)
//теперь сортируем хвост списка, исключив из рассмотрения уже отсортированные элементы



//Сортировка с вычислением адреса
void AdressCalcSort(int arr[], int n) {
	int i, j;

	for (i = 0; i < n * 2; i++) { 
		for (j = 0; j < n; j++) {
			arr[j[arr[i]]]++;
		}

	}
}
//Создаём 2 списка, 1 равен кол-ву эл-тов, 2 больше первого.
//для обобщения метода вставок
//предполагаем что эл-т находится в одном из нескольких диапазонов, это происходит с вероятностью 1\м



//Сортировкка обменами
void bubbleSort(int arr[], int n) {
	int i, j;
	for (i = 0; i < n - 1; i++) {
		for (j = 0; j < n - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				swap(arr[j], arr[j + 1]);
			}
		}
	}
}
//Сравниваем пары элементов и меняем их местами
